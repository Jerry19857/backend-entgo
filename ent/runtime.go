// Code generated by entc, DO NOT EDIT.

package ent

import (
	"jimmap/ent/image"
	"jimmap/ent/schema"
	"jimmap/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	imageFields := schema.Image{}.Fields()
	_ = imageFields
	// imageDescImage is the schema descriptor for image field.
	imageDescImage := imageFields[0].Descriptor()
	// image.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	image.ImageValidator = imageDescImage.Validators[0].(func(string) error)
	// imageDescLongitude is the schema descriptor for longitude field.
	imageDescLongitude := imageFields[1].Descriptor()
	// image.LongitudeValidator is a validator for the "longitude" field. It is called by the builders before save.
	image.LongitudeValidator = imageDescLongitude.Validators[0].(func(string) error)
	// imageDescLatitude is the schema descriptor for latitude field.
	imageDescLatitude := imageFields[2].Descriptor()
	// image.LatitudeValidator is a validator for the "latitude" field. It is called by the builders before save.
	image.LatitudeValidator = imageDescLatitude.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
}
